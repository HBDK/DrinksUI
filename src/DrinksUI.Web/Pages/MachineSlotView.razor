@page "/slots"
@using DrinksUI.Data.Services
@using DrinksUI.Dtos.implementations
@using DrinksUI.Dtos.Interfaces
@using System.Linq;
@using DrinksUI.Dtos

@inject MachineSlotService MachineSlotService
@inject DrinkService DrinkService

<h3>MachineSlotView</h3>

<p>
    @for (int i = 0; i < _wets.Length; i++)
    {
        <Slot @bind-MachineSlot="_wets[i]" @bind-Ingredients="_ingredients" />
    }
</p>
<p>
    <div class="row">
        <div class="col-sm-2">
            <select class="form-control" onchange="">
                <option value="">@_selectedExtra</option>
                @foreach (var ingredient in _ingredients.Where(ingredient => ingredient.AddieType == AddieType.Extra)
                                                        .Where(ingredient => ingredient.Type != _selectedExtra)
                                                        .Where(ingredient => _notInExtras.Contains(ingredient.Id)))
                {
                    <option value="@ingredient">@ingredient.Type</option>
                }
            </select>
        </div>
        <div class="col-sm-1">
            <button class="btn btn-primary" @onclick="@Add">Add</button>
        </div>
    </div>


    <ul>
        @foreach (var extra in _extras)
        {
            <li>
                @extra.Ingredient.Type
            </li>
        }
    </ul>
</p>
@code {
    private IIngredient[] _ingredients;
    private MachineSlotDto[] _wets;
    private List<MachineSlotDto> _extras;
    private IQueryable<int> _notInExtras;
    private string _selectedExtra;

    protected override async Task OnInitializedAsync()
    {
        var response = await MachineSlotService.GetSlots();
        var slots = response.Select(slot => new MachineSlotDto(slot)).ToList();
        _ingredients = (await DrinkService.GetAllIngredients()).ToArray();

        _wets = slots.Where(ingredient => ingredient.DispensingType != AddieType.Extra).OrderBy(slot => slot.DispensingType).ToArray();
        _extras = slots.Where(ingredient => ingredient.DispensingType == AddieType.Extra).ToList();

        _notInExtras = _ingredients.Where(ingredient => !_extras.Select(slot => slot.Ingredient.Id).Contains(ingredient.Id)).Select(ingredient => ingredient.Id).AsQueryable();

        _selectedExtra = _ingredients.Where(x => x.AddieType == AddieType.Extra).First(ingredient => _notInExtras.Contains(ingredient.Id)).Type ?? "No thing left to add";
    }

    protected Task Add()
    {
        Console.WriteLine($"Add {_selectedExtra}"); //TODO:Implement this.
        return Task.CompletedTask;
    }

}
